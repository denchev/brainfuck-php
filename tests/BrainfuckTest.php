<?php

declare(strict_types=1);

use PHPUnit\Framework\TestCase;

require_once "brainfuck.php";

final class BrainfuckTest extends TestCase
{
	public function testHelloWorld() {
		$input = "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.";
		$bf = new BrainFuck( $input );
		$result = $bf->compile();

		$this->assertEquals("Hello World!\n", $result);
	}

	public function testJustAnotherBrainfuckHacker() {
		$input = "+++[>+++++<-]>[>+>+++>+>++>+++++>++<[++<]>---]>->-.[>++>+<<--]>--.--.+.>>>++.<<.<------.+.+++++.>>-.<++++.<--.>>>.<<---.<.-->-.>+.[+++++.---<]>>[.--->]<<.<+.++.++>+++[.<][.]<++.";
		$bf = new BrainFuck( $input );
		$result = $bf->compile();

		$this->assertEquals("Just another brainfuck hacker.", $result);
	}

	public function testSquareNumbers() {
		$input = "++++[>+++++<-]>[<+++++>-]+<+[>[>+>+<<-]++>>[<<+>>-]>>>[-]++>[-]+>>>+[[-]++++++>>>]<<<[[<++++++++<++>>-]+<.<[>----<-]<]<<[>>>>>[>>>[-]+++++++++<[>-<-]+++++++++>[-[<->-]+[<<<]]<[>+<-]>]<<-]<<-]";
		$bf = new BrainFuck( $input );
		$result = $bf->compile();

		$expected = "";

		for($i = 0; $i <= 100; $i++) {
			$expected .= $i * $i . "\n";
		}

		$this->assertEquals($expected, $result);
	}

	public function testRot13() {
		$input = "+[,+[-[>+>+<<-]>[<+>-]+>>++++++++[<-------->-]<-[<[-]>>>+[<+<+>>-]<[>+<-]<[<++>>>+[<+<->>-]<[>+<-]]>[<]<]>>[-]<<<[[-]<[>>+>+<<<-]>>[<<+>>-]>>++++++++[<-------->-]<->>++++[<++++++++>-]<-<[>>>+<<[>+>[-]<<-]>[<+>-]>[<<<<<+>>>>++++[<++++++++>-]>-]<<-<-]>[<<<<[-]>>>>[<<<<->>>>-]]<<++++[<<++++++++>>-]<<-[>>+>+<<<-]>>[<<+>>-]+>>+++++[<----->-]<-[<[-]>>>+[<+<->>-]<[>+<-]<[<++>>>+[<+<+>>-]<[>+<-]]>[<]<]>>[-]<<<[[-]<<[>>+>+<<<-]>>[<<+>>-]+>------------[<[-]>>>+[<+<->>-]<[>+<-]<[<++>>>+[<+<+>>-]<[>+<-]]>[<]<]>>[-]<<<<<------------->>[[-]+++++[<<+++++>>-]<<+>>]<[>++++[<<++++++++>>-]<-]>]<[-]++++++++[<++++++++>-]<+>]<.[-]+>>+<]>[[-]<]<]";
		$bf = new BrainFuck( $input, 'brainfuck' );
		$result = $bf->compile();

		$this->assertEquals("oenvashpx", $result);
	}

	public function testBrainfuckSelf() {
		$input = ",[>>++++++[-<+++++++>]<+<[->.<]>+++.<++++[->++++<]>.>,]";
		$bf = new BrainFuck( $input, 'brainfuck' );
		$result = $bf->compile();

		$this->assertEqualsresult);
	}

	public function testOutputSame() {
		$input = ",[.,]";
		$bf = new BrainFuck( $input, 'brainfuck 123' );
		$result = $bf->compile();

		$this->assertEquals("brainfuck 123", $result);
	}

	public function testReverseInput() {
		$input = ",[>,]<[.<]";
		$bf = new BrainFuck( $input, 'brainfuck 123' );
		$result = $bf->compile();

		$this->assertEquals("321 kcufniarb", $result);
	}

	public function testReverseStringReverse() {
		$input = "+++ >> ,[>,] <[<] <- [ >> [.>] <[.<] <-]";
		$bf = new BrainFuck( $input, 'a1b2c3' );
		$result = $bf->compile();

		$this->assertEquals("a1b2c33c2b1aa1b2c33c2b1a", $result);
	}

	public function testFibonacci() {
		$input = "+++++++++++>+>>>>++++++++++++++++++++++++++++++++++++++++++++>++++++++++++++++++++++++++++++++<<<<<<[>[>>>>>>+>+<<<<<<<-]>>>>>>>[<<<<<<<+>>>>>>>-]<[>++++++++++[-<-[>>+>+<<<-]>>>[<<<+>>>-]+<[>[-]<[-]]>[<<[>>>+<<<-]>>[-]]<<]>>>[>>+>+<<<-]>>>[<<<+>>>-]+<[>[-]<[-]]>[<<+>>[-]]<<<<<<<]>>>>>[++++++++++++++++++++++++++++++++++++++++++++++++.[-]]++++++++++<[->-<]>++++++++++++++++++++++++++++++++++++++++++++++++.[-]<<<<<<<<<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-]<-[>>.>.<<<[-]]<<[>>+>+<<<-]>>>[<<<+>>>-]<<[<+>-]>[<+>-]<<<-]";
		$bf = new BrainFuck( $input );
		$result = $bf->compile();

		$this->assertEquals("1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89", $result);
	}
}

